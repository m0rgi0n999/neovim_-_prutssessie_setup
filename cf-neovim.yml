
AWSTemplateFormatVersion: "2010-09-09"
Description: Create virtual machine with git in specified (in general "default") vpc

Parameters:

  Ubuntu2002AMI: 
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id
  EC2InstanceType:
    Type: String
    Default: t2.micro  # t2.micro is 1 GiB ram, 1 vCPUs - this should be enough for a prutssessie Neovim

  PrivateIpControl:
    Type: String
    Default: 172.31.0.10
  PrivateIpWorker:
    Type: String
    Default: 172.31.0.11

  Username:
    Type: String
    Default: student
  DefaultPassword:
    Type: String
    Default: AlternateReality1233!
  ConsultantName:
    Type: String
    Default: Erwin

Mappings:
  AWSManagedRoles:
    SSM:
      AmazonSSMManagedInstanceCore: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

Resources:

  KubernetesVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "CKS-${ConsultantName}"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref KubernetesVPC

  ExecuteDeleteVpcFunction:
    Type: Custom::ExecuteDeleteVpcFunction
    Properties:
      Vpc           : !Ref KubernetesVPC
      ServiceToken  : !GetAtt DeleteVpcFunction.Arn

  PublicSubnetAZa:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", "a"]]
      CidrBlock: 172.31.0.0/16
      MapPublicIpOnLaunch: true
      VpcId: !Ref KubernetesVPC
      Tags:
        - Key: Name
          Value: PublicSubnetAZa
  PublicSubnetAZaRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZa

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: PublicRouteTable
      VpcId: !Ref KubernetesVPC
  PublicRoutePublicInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  KubernetesIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !FindInMap [ "AWSManagedRoles", "SSM", "AmazonSSMManagedInstanceCore"]

  KubernetesIAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref KubernetesIAMRole

  KubernetesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Securitygroup for K8S
      VpcId: !Ref KubernetesVPC
      SecurityGroupIngress:
        - CidrIp: 172.31.0.0/16
          FromPort: 0
          ToPort: 65535
          IpProtocol: TCP
        - CidrIp: 172.31.0.0/16
          FromPort: 0
          ToPort: 65535
          IpProtocol: UDP

  KubernetesControlNode:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            apt:
              git: []
          files:
            '/etc/apt/sources.list.d/falcosecurity.list':
              content: |
                deb [signed-by=/usr/share/keyrings/falco-archive-keyring.gpg] https://download.falco.org/packages/deb stable main
            '/opt/xforce/id_rsa': 
              content: |
                -----BEGIN OPENSSH PRIVATE KEY-----
                b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn
                NhAAAAAwEAAQAAAYEA+NOq1vvi+ithb64ePPvquVZdHtP7iBlQR24DbxyviCr119YseaM8
                PeF5hGjVLbIiTIEbVuyXRLZ1ndE5/xAR2qmXyHx+X5FlMSBFWmYtRZew5+L9cYmmNaDiX0
                CdZMh0DT3pk1vMUFsvQyywvefYFvat/2lTXkLdYLeCtlq/XxWQTUJnsiP1AYT0bSDFq08s
                nC3aYe1FMGMlNKNeFe9+SIoYZiaUp1KA7vCFy1/TvQ1ydDESIvHkUazv0WscIaZfD/ZOdO
                5rZ+zy/BmB1hGQHmyg0RctjDT7BMpzo7ZPvQwXJdQVT0FuP5cwkGliSEboHEPb/EeZonld
                8qUV80LKVjDd+oDg+8QXw63PBzChrU4UhBWMVV/E00kWWm8A4lNGlHUK1wzlC0IQpVn8B7
                bRQvNnrUxfiXnCAifblrRdsVMjAGBmqc95yuXF8biheRKcsJpN8zms3IlxbMOZ5Uo7tL9f
                gT1iPl5MP1/Y4gm4c0BJihqgOAz9GBUOPEUizghDAAAFkCDoZmcg6GZnAAAAB3NzaC1yc2
                EAAAGBAPjTqtb74vorYW+uHjz76rlWXR7T+4gZUEduA28cr4gq9dfWLHmjPD3heYRo1S2y
                IkyBG1bsl0S2dZ3ROf8QEdqpl8h8fl+RZTEgRVpmLUWXsOfi/XGJpjWg4l9AnWTIdA096Z
                NbzFBbL0MssL3n2Bb2rf9pU15C3WC3grZav18VkE1CZ7Ij9QGE9G0gxatPLJwt2mHtRTBj
                JTSjXhXvfkiKGGYmlKdSgO7whctf070NcnQxEiLx5FGs79FrHCGmXw/2TnTua2fs8vwZgd
                YRkB5soNEXLYw0+wTKc6O2T70MFyXUFU9Bbj+XMJBpYkhG6BxD2/xHmaJ5XfKlFfNCylYw
                3fqA4PvEF8Otzwcwoa1OFIQVjFVfxNNJFlpvAOJTRpR1CtcM5QtCEKVZ/Ae20ULzZ61MX4
                l5wgIn25a0XbFTIwBgZqnPecrlxfG4oXkSnLCaTfM5rNyJcWzDmeVKO7S/X4E9Yj5eTD9f
                2OIJuHNASYoaoDgM/RgVDjxFIs4IQwAAAAMBAAEAAAGBAPMKZIs6Wzh52OEp1DVC5sEC/0
                /WRJBqEUTDyyzjevxo4dphQu3IqFXU/0l60AajQOczEA42Z4ZhJb7xl1FwU9Ad6LiWCSW1
                sX5rg/JJbRzVjqDg0SbuCV/GdnYNee7v8JLij1w0xPsUJbTaWQQVCbdcWRXpvdmLPAp1FI
                KjXts0B8++9eRFRNGoGMriwNCUNAGUtAMEq5kYrkWc8JBCbjnSUQSt2HManf9FBZphTkMR
                eGLPb2ScmqPAZDpMAZ1IjxLPIXlLds2fQsW6izXknm9+hHe8k8oApQwlA7cxlgwlJV4i3y
                V5w9OOAQDgodmPrJBjcCgT7BzW7Ir/RKhDsJbgcnpbpZg+dYNr0Vc2zLBE4MAaBY8ldVx2
                v2QKqdof3fU6GBFPo4blq8ORSkHS4ETROWuyCePWajfvSssTVS4J59ZeF3wxZA7iTFAZPP
                fhteQ9grG7/zLMMY57/ynG9Utke7sB4MesGPLohe6aBecZhJUtl4lvCc45PFD5qUqaaQAA
                AMEA4pcMVlLxhtFXSbVjS/FaRWdcKNu1vRpU6uoYo2pm8f6SuIQ6VWL7I75zuTlEepqJlm
                oDjVGxGY4RStAQQvNSZJfZhcvUTauCkQBiNSUldU8S254gqfYp4SFxTThz01BlpKttazfU
                0zhRz86hj0dhhOBaqNm8ffbT4dnmW+DQd+/WWZ41ceA5hdM+cpNH6PSoxZ9inCVQ8mTM8O
                UyVBKVyUr/AUfPEAV9psCbvBsvRTNDrmz/LCRGo2095vkoi30eAAAAwQD9IONWQy+Hoxj+
                ZEd/sQHgvX0pkLfSqkvmag1ie2tn7ZTwzZ9sYiIXPeA1fLjtW5uWTCLeE7jNn3LWOIkQTZ
                ZAlc7zKre3xEPBm8CBXBjaIwryyiSnwqQvo1wWmwndWwSodzfWC1TR6jsBGhfLeEvtJBP2
                abt8Un99i03vDlNO1FmjVMP0q9O2bEe30e8kSPw/94RCDg3mLN9YNjO+xB5sBKfL6Hs7wA
                Bmjo2TwNvv/8yVCMcKuTeckVBDCJRPQL8AAADBAPumSXDhY/e3KOUiudNlfkmpcdBBvFgX
                f88h5Y1XZKbJKvvU9yWF6Ax1j9nKyh2gIC0S3xWOW+5wGjSuCtvcpBp27bprcOlYdIMQIU
                yAVPuufp2pNAtDP2rUmkfBReyalIheFmaPA+oTDMP0daY669PdxWhZ91vkY6JGhRhbcVSR
                2u5Iw4UPv28I5i74G9pxFeqT19kkvRXGDkfEiYg+WUM0EIEbmlXp9mFaGFLbGgYSV77++j
                G6YKt/KCe5I2RVfQAAABJmcmVkZXJpcXVlQGNvbnRyb2wBAgMEBQYH
                -----END OPENSSH PRIVATE KEY-----
              mode: 000400
            '/opt/xforce/id_rsa.pub': 
              content: !Sub |
                ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQD406rW++L6K2Fvrh48++q5Vl0e0/uIGVBHbgNvHK+IKvXX1ix5ozw94XmEaNUtsiJMgRtW7JdEtnWd0Tn/EBHaqZfIfH5fkWUxIEVaZi1Fl7Dn4v1xiaY1oOJfQJ1kyHQNPemTW8xQWy9DLLC959gW9q3/aVNeQt1gt4K2Wr9fFZBNQmeyI/UBhPRtIMWrTyycLdph7UUwYyU0o14V735IihhmJpSnUoDu8IXLX9O9DXJ0MRIi8eRRrO/Raxwhpl8P9k507mtn7PL8GYHWEZAebKDRFy2MNPsEynOjtk+9DBcl1BVPQW4/lzCQaWJIRugcQ9v8R5mieV3ypRXzQspWMN36gOD7xBfDrc8HMKGtThSEFYxVX8TTSRZabwDiU0aUdQrXDOULQhClWfwHttFC82etTF+JecICJ9uWtF2xUyMAYGapz3nK5cXxuKF5Epywmk3zOazciXFsw5nlSju0v1+BPWI+Xkw/X9jiCbhzQEmKGqA4DP0YFQ48RSLOCEM= ${Username}@control
              mode: 000400
            '/opt/xforce/authorized_keys': 
              content: !Sub |
                ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKxiWvPp9yFNJ//0H/RhlgxjpJOtoPIidUhoFtIzueqaPFLbGIjFHxO7UyqtIN6AWPYqjEF7LfLdG3LGGk5zV2oIlMol66QNgKQXNZXDKYVOMK22lQEEMPctTjR1iLY/54ChwEM1fgXECol5Lnks+3FYkKwkPklHywLmC1VPawygPfPnP7RHjUyCHnNAh9yaoAD1Ga2xpyykNlTL8/HrV3iBFidrw+rXC+9CcDVVrjcwGdVNOTw6rHg9r8CKXpqWnL4jYWLIcjmjl7KbXaCkl3776YwT6mfZXUdPaJVzP3pvPsCSFW0yutbE6eVuD0r5brpzUhFjRdj8VdC/WI/Veqw1DL5KnpUbl0fJh8xZumUK2fUhBImEC81WwwwYMMqjTKeNQVmyap53Ixk0zt9Wk9quTso5gaIg9Bw5emiQPhTaJeqUvqUnGIipJD7677fRqASS3GoUyk2TjLs5KSN6+Wo0w7fIt2c/fl3QfkPrrsVkPdlbWS4k+KMQeRgAxOBsE= ${Username}@worker
              mode: 000400
            '/opt/xforce/pv-spire-data-spire-volume.yaml': 
              content: !Sub |
                apiVersion: v1
                kind: PersistentVolume
                metadata:
                  name: pv-spire-data-spire-volume
                  namespace: cilium-spire
                spec:
                  capacity:
                    storage: 1Gi
                  volumeMode: Filesystem
                  accessModes:
                  - ReadWriteOnce
                  persistentVolumeReclaimPolicy: Delete
                  local:
                    path: /mnt/spire-data-spire-volume
                  nodeAffinity:
                    required:
                      nodeSelectorTerms:
                      - matchExpressions:
                        - key: kubernetes.io/hostname
                          operator: In
                          values:
                          - control
              mode: 000400
            '/opt/xforce/01-install-kubernetes-controlnode.sh':
              content: !Sub |
                #!/bin/bash

                function os_update() {
                  apt update 
                  apt upgrade -y
                }

                function install_git() {
                  apt install git -y
                }

                function change_hostname() {
                  hostname=$1
                  echo $hostname > /etc/hostname
                  hostname $hostname
                }

                function add_hostnames_to_hosts_file() {
                  echo "172.31.0.10 control" >> /etc/hosts
                  echo "172.31.0.11 worker" >> /etc/hosts
                }

                function sudu_no_passwd() {
                  sed -i "s/%admin ALL=(ALL) ALL/%admin ALL=(ALL) NOPASSWD: ALL/" /etc/sudoers 
                }

                function add_user() {
                  echo /usr/sbin/useradd -d /home/${Username} -G admin -m -s /bin/bash ${Username} > /var/log/useradd.txt
                  /usr/sbin/useradd -d /home/${Username} -G admin -m -s /bin/bash ${Username} 
                  echo -e "${DefaultPassword}\n${DefaultPassword}" | passwd ${Username} 
                }

                function use_vim() {
                  echo "export VISUAL=vim" >> ~${Username}/.bashrc
                  echo "export VISUAL=vim" >> ~root/.bashrc
                }

                function create_ssh_keyfiles() {
                  mkdir -p /home/${Username}/.ssh
                  mv /opt/xforce/id_rsa /home/${Username}/.ssh/id_rsa
                  chmod 400 /home/${Username}/.ssh/id_rsa
                  mv /opt/xforce/id_rsa.pub /home/${Username}/.ssh/id_rsa.pub
                  chmod 400 /home/${Username}/.ssh/id_rsa.pub
                  mv /opt/xforce/authorized_keys /home/${Username}/.ssh/authorized_keys
                  chmod 400 /home/${Username}/.ssh/authorized_keys

                  systemctl daemon-reload
                  systemctl restart sshd
                  systemctl restart ssh
                }

                function install_kubernetes_control() {
                  mkdir -p /clone

                  cd /clone
                  export HOME=/home/${Username}
                  wget https://cm.lf.training/LFS260/LFS260_V2024-09-25_SOLUTIONS.tar.xz --user=LFtraining --password=Penguin2014
                  tar -xvf ./LFS260_V2024-09-25_SOLUTIONS.tar.xz
                  cd /clone/LFS260/SOLUTIONS/s_04
                  sed -i 's/cilium install/cilium install --set authentication.mutual.spire.enabled=true --set authentication.mutual.spire.install.enabled=true --set enable-node-selector-labels=true/' ./k8scp.sh
                  bash ./k8scp.sh                                                                                                                               
                  kubeadm token create --print-join-command > $HOME/join-cmd.sh
                }

                function make_it_possible_for_root_to_use_kubectl() {
                  HOME=/root
                  mkdir -p $HOME/.kube
                  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
                  sudo chown $(id -u):$(id -g) $HOME/.kube/config
                }

                function post_install_spitfire() {
                  mkdir -p /mnt/spire-data-spire-volume
                  kubectl apply -f /opt/xforce/pv-spire-data-spire-volume.yaml
                  kubectl taint node control node-role.kubernetes.io/control-plane-
                  sleep 10
                  kubectl taint node control node-role.kubernetes.io/control-plane
                }

                function install_etcd() {
                  apt install etcd -y 2>&1 > /dev/null
                }

                function get_gpg_key_falco() {
                  cd /opt/falco
                  curl -fsSL https://falco.org/repo/falcosecurity-packages.asc | gpg --dearmor -o /usr/share/keyrings/falco-archive-keyring.gpg
                }

                function install_falco() {
                  mkdir -p /opt/falco
                  cd /opt/falco

                  export FALCO_DRIVER_CHOICE=kmod
                  export FALCO_FRONTEND=noninteractive
                  apt-get update -y
                  apt-get install -y dialog
                  apt-get install -y falco
                }

                function install_kube_bench() {
                  curl -L https://github.com/aquasecurity/kube-bench/releases/download/v0.9.2/kube-bench_0.9.2_linux_amd64.deb -o kube-bench_0.9.2_linux_amd64.deb
                  apt install ./kube-bench_0.9.2_linux_amd64.deb -f
                }

                function install_bom() {
                  cd /clone
                  mkdir bom
                  cd bom
                  curl -LO https://github.com/kubernetes-sigs/bom/releases/download/v0.6.0/bom-amd64-linux
                  chmod a+x bom-amd64-linux
                  ln -s /clone/bom/bom-amd64-linux /usr/local/bin/bom 
                }

                function change_permissions() {
                  chown ${Username}:${Username} -R /home/${Username}
                  chown ${Username}:${Username} -R /clone
                }

                function force_password_change() {
                  passwd -e ${Username}
                }

                function install_opa() {
                  kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/v3.17.1/deploy/gatekeeper.yaml 
                }

                function install_ingress_nginx() {
                  kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/cloud/deploy.yaml 
                }

                get_gpg_key_falco
                os_update
                install_git
                change_hostname control
                add_hostnames_to_hosts_file
                sudu_no_passwd

                add_user
                use_vim
                create_ssh_keyfiles
                change_permissions

                install_kubernetes_control
                make_it_possible_for_root_to_use_kubectl
                post_install_spitfire
                install_etcd
                install_falco
                install_kube_bench
                install_bom
                install_opa
                change_permissions
                echo wait 30 seconds
                sleep 30
                install_ingress_nginx

                echo wait 5 minutes
                sleep 300
                force_password_change
              mode: 000500
          commands:
            01-install-kubernetes-controlnode:
              command: /opt/xforce/01-install-kubernetes-controlnode.sh 2>&1 | tee /var/log/01-install-kubernetes-controlnode.out
              ignoreErrors: false
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties:
      ImageId: !Ref Ubuntu2002AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref KubernetesIAMInstanceProfile
      Tags:
        - Key: Name
          Value: KubernetesControlNode
      SecurityGroupIds:
        - !Ref KubernetesSecurityGroup
      SubnetId: !Ref PublicSubnetAZa
      PrivateIpAddress: !Ref PrivateIpControl
      UserData: 
        "Fn::Base64": 
          !Sub |
            #!/bin/bash
            # ===
            # Source: https://gist.github.com/b0tting/f1a83a8ecca42ae37cc2c40d6174cead - used to install cfn-init and cfn-signal
            export DEBIAN_FRONTEND=noninteractive
            export VENV_DIR=/opt/aws/cfn-bootstrap-venv
            export HELPER_SCRIPTS_BIN_DIR=/opt/aws/bin

            # Install python 3.11 from deadsnakes, this will not be the default python, that will stay on 3.12
            apt update	
            apt-get install -y tzdata software-properties-common
            add-apt-repository -y ppa:deadsnakes/ppa 
            apt update
            apt install -y python3.11 python3.11-venv 

            # Set up a virtual env
            mkdir -p $VENV_DIR	
            python3.11 -m venv $VENV_DIR	
            source $VENV_DIR/bin/activate

            # Install the CFN helper scripts. These will link to the virtual environment & 3.11, not touching the 
            # system standard python 3.12
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            mkdir -p $HELPER_SCRIPTS_BIN_DIR	
            ln -s $VENV_DIR/bin/cfn-* $HELPER_SCRIPTS_BIN_DIR
            deactivate
            #===

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource KubernetesControlNode --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource KubernetesControlNode --region ${AWS::Region}


  KubernetesWorkerNode:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            apt:
              git: []
          files:
            '/etc/apt/sources.list.d/falcosecurity.list':
              content: |
                deb [signed-by=/usr/share/keyrings/falco-archive-keyring.gpg] https://download.falco.org/packages/deb stable main
            '/opt/xforce/id_rsa': 
              content: |
                -----BEGIN OPENSSH PRIVATE KEY-----
                b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn
                NhAAAAAwEAAQAAAYEAysYlrz6fchTSf/9B/0YZYMY6STraDyInVIaBbSM7nqmjxS2xiIxR
                8Tu1MqrSDegFj2KoxBey3y3RtyxhpOc1dqCJTKJeukDYCkFzWVwymFTjCttpUBBDD3LU40
                dYi2P+eAocBDNX4FxAqJeS55LPtxWJCsJD5JR8sC5gtVT2sMoD3z5z+0R41Mgh5zQIfcmq
                AA9RmtsacspDZUy/Px61d4gRYna8Pq1wvvQnA1Va43MBnVTTk8Oqx4Pa/Ail6alpy+I2Fi
                yHI5o5eym12gpJd+++mME+pn2V1HT2iVcz96bz7AkhVtMrrWxOnlbg9K+W66c1IRY0XY/F
                XQv1iP1XqsNQy+Sp6VG5dHyYfMWbplCtn1IQSJhAvNVsMMGDDKo0ynjUFZsmqedyMZNM7f
                VpPark7KOYGiIPQcOXpokD4U2iXqlL6lJxiIqSQ++u+30agEktxqFMpNk4y7OSkjevlqNM
                O3yLdnP35d0H5D667FZD3ZW1kuJPijEHkYAMTgbBAAAFiLLgLCSy4CwkAAAAB3NzaC1yc2
                EAAAGBAMrGJa8+n3IU0n//Qf9GGWDGOkk62g8iJ1SGgW0jO56po8UtsYiMUfE7tTKq0g3o
                BY9iqMQXst8t0bcsYaTnNXagiUyiXrpA2ApBc1lcMphU4wrbaVAQQw9y1ONHWItj/ngKHA
                QzV+BcQKiXkueSz7cViQrCQ+SUfLAuYLVU9rDKA98+c/tEeNTIIec0CH3JqgAPUZrbGnLK
                Q2VMvz8etXeIEWJ2vD6tcL70JwNVWuNzAZ1U05PDqseD2vwIpempacviNhYshyOaOXsptd
                oKSXfvvpjBPqZ9ldR09olXM/em8+wJIVbTK61sTp5W4PSvluunNSEWNF2PxV0L9Yj9V6rD
                UMvkqelRuXR8mHzFm6ZQrZ9SEEiYQLzVbDDBgwyqNMp41BWbJqnncjGTTO31aT2q5OyjmB
                oiD0HDl6aJA+FNol6pS+pScYiKkkPvrvt9GoBJLcahTKTZOMuzkpI3r5ajTDt8i3Zz9+Xd
                B+Q+uuxWQ92VtZLiT4oxB5GADE4GwQAAAAMBAAEAAAGAKfxxXSH4XeTV2U7/WV4obxNcik
                E3WZ7Wyfe34ONEuwuhL3jQo9d6OBsG3+Di8aIzVIc3LrNBhFi2bdkwtrZxKYkAJPAR8Trw
                AN+ghMZEa6pYAK2B1uQnHpHGZvEk8mfYDv744h3HeltfwAjykCSkAeLhp2qmKDRexRQ1Th
                azpdOOjbEezs5UvqpZ6sepYnJZUv3ZBdmMVmxvHBCSIP240XFJODwhqlC7Ya6oTVZlJWdw
                1CT2UkhXmkxBEaKwx/sd4AeJRcY7PygpjGvrwfyU3qJVOduHiTrNFH9dUVw7ffN1rZPrrq
                bU81LQHAUoTRJfiTtga4Ao1dnR6t+2wevxkHofvqVL6R1D/Wx+uP13O442TBs9jHYliYOf
                neJpQk6vKJ+AQa2hX1oJHhLcmuaPL9jNIIimsX+sxkmcbN96OPhSSvsZSie9PaIET7H1jT
                luoq61JmI8O4kpKpb8R9bK9W8lkKZIeTI1I2yamYTMUGq3zruZa+IAV333z6kyG3OJAAAA
                wQCPSQm7IdV2wzSMXVo+DmIu936OfPAdqFsMjg9T744mziXohIY5fWy01hsQfy1iCQVmQC
                ju+KXmDadDNh9zPNUKxVOk4ehdcNVnHVW4uFHyTuaPiZDC/VnR6ojc8mpllwt2FdX6sGm7
                JHE6L87nmHS6aZRrMrtnqk0780bqux0ENIynRRE2x6d5zVXSt6H8qwG7jkMO2EICP4bvfy
                vw766gQ54Yt079Sav6YCf0vj6qllWqy5h0pYWOWXPbHDe+IQUAAADBAP1+HUzRTAHPdmOY
                MwAfRI/wYwff1fe98Z58LfiPRt0Hhgef9vc/h6f5agc/xV8ll59WipvED+xn0ZK2pT084V
                63vL7WCyQaHDEXwfx3iffnzWyA/Og/8RnNITbuAvnyB3s9SdIhNwhOpPycw+UPUJM+qnfZ
                BN53acLKqt+pYEc1UlhBdSdTAQeQUa0xhi+qReUZVVHPqipinAjYuS++Hgv8qRmFLYw+Jw
                W6PNHVa1HpeUrVu58f/n8dGwaCFwI5lwAAAMEAzMea0XCkfItmTWG9v/2t8+XHeJFk+IFE
                du9auBERsuwHXAX8jtfTq/T/ZpU76ifGGz+eWuauHqCn5tOal/3SPOIvG6ObSpv+Z960Ns
                2EjP25ezEuZZhgi+G/uQFIhUUIww1XdNRkuj70+PjmRVId07zW767bonmEN/TpfDUKLqD8
                UI6e3AgEANwICVzBA/xC0G/NMS4ZmOKonPiGxwsnlzaPNwXL3up//R4dPwUaOswEsDDTIz
                JotbA3SyvOC11nAAAAEWZyZWRlcmlxdWVAd29ya2VyAQ==
                -----END OPENSSH PRIVATE KEY-----
              mode: 000400
            '/opt/xforce/id_rsa.pub': 
              content: !Sub |
                ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKxiWvPp9yFNJ//0H/RhlgxjpJOtoPIidUhoFtIzueqaPFLbGIjFHxO7UyqtIN6AWPYqjEF7LfLdG3LGGk5zV2oIlMol66QNgKQXNZXDKYVOMK22lQEEMPctTjR1iLY/54ChwEM1fgXECol5Lnks+3FYkKwkPklHywLmC1VPawygPfPnP7RHjUyCHnNAh9yaoAD1Ga2xpyykNlTL8/HrV3iBFidrw+rXC+9CcDVVrjcwGdVNOTw6rHg9r8CKXpqWnL4jYWLIcjmjl7KbXaCkl3776YwT6mfZXUdPaJVzP3pvPsCSFW0yutbE6eVuD0r5brpzUhFjRdj8VdC/WI/Veqw1DL5KnpUbl0fJh8xZumUK2fUhBImEC81WwwwYMMqjTKeNQVmyap53Ixk0zt9Wk9quTso5gaIg9Bw5emiQPhTaJeqUvqUnGIipJD7677fRqASS3GoUyk2TjLs5KSN6+Wo0w7fIt2c/fl3QfkPrrsVkPdlbWS4k+KMQeRgAxOBsE= ${Username}@worker
              mode: 000400
            '/opt/xforce/authorized_keys': 
              content: !Sub |
                ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQD406rW++L6K2Fvrh48++q5Vl0e0/uIGVBHbgNvHK+IKvXX1ix5ozw94XmEaNUtsiJMgRtW7JdEtnWd0Tn/EBHaqZfIfH5fkWUxIEVaZi1Fl7Dn4v1xiaY1oOJfQJ1kyHQNPemTW8xQWy9DLLC959gW9q3/aVNeQt1gt4K2Wr9fFZBNQmeyI/UBhPRtIMWrTyycLdph7UUwYyU0o14V735IihhmJpSnUoDu8IXLX9O9DXJ0MRIi8eRRrO/Raxwhpl8P9k507mtn7PL8GYHWEZAebKDRFy2MNPsEynOjtk+9DBcl1BVPQW4/lzCQaWJIRugcQ9v8R5mieV3ypRXzQspWMN36gOD7xBfDrc8HMKGtThSEFYxVX8TTSRZabwDiU0aUdQrXDOULQhClWfwHttFC82etTF+JecICJ9uWtF2xUyMAYGapz3nK5cXxuKF5Epywmk3zOazciXFsw5nlSju0v1+BPWI+Xkw/X9jiCbhzQEmKGqA4DP0YFQ48RSLOCEM= ${Username}@control
              mode: 000400
            '/opt/xforce/01-install-kubernetes-workernode.sh':
              content: !Sub |
                #!/bin/bash
                function os_update() {
                  apt update 
                  apt upgrade -y
                }

                function change_hostname() {
                  hostname=$1
                  echo $hostname > /etc/hostname
                  hostname $hostname
                }

                function add_hostnames_to_hosts_file() {
                  echo "172.31.0.10 control" >> /etc/hosts
                  echo "172.31.0.11 worker" >> /etc/hosts
                }

                function sudu_no_passwd() {
                  sed -i "s/%admin ALL=(ALL) ALL/%admin ALL=(ALL) NOPASSWD: ALL/" /etc/sudoers 
                }

                function add_user() {
                  echo /usr/sbin/useradd -d /home/${Username} -G admin -m -s /bin/bash ${Username} > /var/log/useradd.txt
                  /usr/sbin/useradd -d /home/${Username} -G admin -m -s /bin/bash ${Username} 
                  echo -e "${DefaultPassword}\n${DefaultPassword}" | passwd ${Username} 
                }

                function use_vim() {
                  echo "export VISUAL=vim" >> ~${Username}/.bashrc
                  echo "export VISUAL=vim" >> ~root/.bashrc
                }

                function create_ssh_keyfiles() {
                  mkdir -p /home/${Username}/.ssh
                  mv /opt/xforce/id_rsa /home/${Username}/.ssh/id_rsa
                  chmod 400 /home/${Username}/.ssh/id_rsa
                  mv /opt/xforce/id_rsa.pub /home/${Username}/.ssh/id_rsa.pub
                  chmod 400 /home/${Username}/.ssh/id_rsa.pub
                  mv /opt/xforce/authorized_keys /home/${Username}/.ssh/authorized_keys
                  chmod 400 /home/${Username}/.ssh/authorized_keys

                  systemctl daemon-reload
                  systemctl restart sshd
                  systemctl restart ssh
                }

                function install_kubernetes_worker() {
                  mkdir -p /clone

                  cd /clone
                  wget https://cm.lf.training/LFS260/LFS260_V2024-09-25_SOLUTIONS.tar.xz --user=LFtraining --password=Penguin2014
                  tar -xvf ./LFS260_V2024-09-25_SOLUTIONS.tar.xz
                  cd /clone/LFS260/SOLUTIONS/s_04
                  bash ./k8sWorker.sh
                }

                function get_gpg_key_falco() {
                  cd /opt/falco
                  curl -fsSL https://falco.org/repo/falcosecurity-packages.asc | gpg --dearmor -o /usr/share/keyrings/falco-archive-keyring.gpg
                }

                function install_falco() {
                  mkdir -p /opt/falco
                  cd /opt/falco

                  export FALCO_DRIVER_CHOICE=kmod
                  export FALCO_FRONTEND=noninteractive
                  apt-get update -y
                  apt-get install -y dialog
                  apt-get install -y falco
                }

                function install_kube_bench() {
                  curl -L https://github.com/aquasecurity/kube-bench/releases/download/v0.9.2/kube-bench_0.9.2_linux_amd64.deb -o kube-bench_0.9.2_linux_amd64.deb
                  apt install ./kube-bench_0.9.2_linux_amd64.deb -f
                }

                function install_bom() {
                  cd /clone
                  mkdir bom
                  curl -LO https://github.com/kubernetes-sigs/bom/releases/download/v0.6.0/bom-amd64-linux
                  chmod a+x bom-amd64-linux
                  ln -s /clone/bom/bom-amd64-linux /usr/local/bin/bom 
                }

                function join_cluster() {
                  su - ${Username}
                  cd ~${Username}

                  while true
                  do
                    sudo -u ${Username} scp -o StrictHostKeyChecking=no ${Username}@control:/home/${Username}/join-cmd.sh .

                    if test -f ./join-cmd.sh
                    then
                      sudo bash ./join-cmd.sh
                      break
                    else
                      echo wait for join command...
                      sleep 10
                    fi
                  done
                }

                function change_permissions() {
                  chown ${Username}:${Username} -R /home/${Username}
                  chown ${Username}:${Username} -R /clone
                }

                function force_password_change() {
                  passwd -e ${Username}
                }

                get_gpg_key_falco
                os_update
                change_hostname worker
                add_hostnames_to_hosts_file
                sudu_no_passwd

                add_user
                use_vim
                create_ssh_keyfiles
                change_permissions

                install_kubernetes_worker
                change_permissions
                install_falco
                install_kube_bench
                install_bom

                join_cluster

                sleep 300
                force_password_change
              mode: 000500
          commands:
            01-install-kubernetes-workernode:
              command: /opt/xforce/01-install-kubernetes-workernode.sh 2>&1 | tee /var/log/01-install-kubernetes-workernode.out
              ignoreErrors: false
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties:
      ImageId: !Ref Ubuntu2002AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref KubernetesIAMInstanceProfile
      Tags:
        - Key: Name
          Value: KubernetesWorkerNode
      SecurityGroupIds:
        - !Ref KubernetesSecurityGroup
      SubnetId: !Ref PublicSubnetAZa
      PrivateIpAddress: !Ref PrivateIpWorker
      UserData: 
        "Fn::Base64": 
          !Sub |
            #!/bin/bash
            # ===
            # Source: https://gist.github.com/b0tting/f1a83a8ecca42ae37cc2c40d6174cead - used to install cfn-init and cfn-signal
            export DEBIAN_FRONTEND=noninteractive
            export VENV_DIR=/opt/aws/cfn-bootstrap-venv
            export HELPER_SCRIPTS_BIN_DIR=/opt/aws/bin

            # Install python 3.11 from deadsnakes, this will not be the default python, that will stay on 3.12
            apt update	
            apt-get install -y tzdata software-properties-common
            add-apt-repository -y ppa:deadsnakes/ppa 
            apt update
            apt install -y python3.11 python3.11-venv 

            # Set up a virtual env
            mkdir -p $VENV_DIR	
            python3.11 -m venv $VENV_DIR	
            source $VENV_DIR/bin/activate

            # Install the CFN helper scripts. These will link to the virtual environment & 3.11, not touching the 
            # system standard python 3.12
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            mkdir -p $HELPER_SCRIPTS_BIN_DIR	
            ln -s $VENV_DIR/bin/cfn-* $HELPER_SCRIPTS_BIN_DIR
            deactivate
            #===

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource KubernetesWorkerNode --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource KubernetesWorkerNode --region ${AWS::Region}

  # DeleteVpc
  # =========
  # When the VPC is deleted, there might be extra security groups that have been added because someone tried f.e. to start a VM in that VPC. The deletion of the VPC
  # will wait until these SGs have been removed. This is not friendly for the users of the templates, so delete the SGs by this custom resource.  

  DeleteVpcExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
              - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "DeleteVpcExecutionRolePolicies"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatch
                Effect: "Allow"
                Action: 
                  - "logs:PutLogEvents"
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                Resource: "*"
              - Sid: EC2
                Effect: "Allow"
                Action: 
                  - "ec2:DescribeSecurityGroups"  
                  - "ec2:DeleteSecurityGroup"
                Resource: "*"
      Path: /
  DeleteVpcFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt DeleteVpcExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          #!/usr/bin/env python
          # -*- coding: utf-8 -*-
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html

          import json
          import cfnresponse
          import boto3

          # get_security_groups
          # ===================
          def get_security_groups(vpc):
            ec2 = boto3.client('ec2')
            response = ec2.describe_security_groups(
                Filters=[
                    {
                        'Name': 'vpc-id',
                        'Values': [vpc]
                    },
                ]
            )
            return response["SecurityGroups"]

          # delete_security_group
          # =====================
          def delete_security_group(security_group_name, security_group_id):
            print("TRACE Delete security group " + security_group_name)

            ec2 = boto3.client('ec2')
            response = ec2.delete_security_group(
              GroupId=security_group_id
            )
            print(response)

          # Main
          # ====

          def lambda_handler(event, context):
            try:
                vpc = event['ResourceProperties']['Vpc']
                print(event)

                if event['RequestType'] == 'Delete':
                    print ("TRACE Get security groups")
                    security_groups = get_security_groups(vpc)
                    print(security_groups)

                    for security_group in security_groups:

                      security_group_is_part_of_stack = False
                      if ("Tags" in security_group):
                        for tag in security_group["Tags"]:

                          if (tag["Key"] == "aws:cloudformation:stack-name"):
                            security_group_is_part_of_stack = True

                      security_group_name = security_group["GroupName"]
                      security_group_id   = security_group["GroupId"]

                      if ((not security_group_is_part_of_stack) and 
                          (security_group_name != "default")):

                        delete_security_group(security_group_name, security_group_id)

                print("TRACE Before SUCCESS")
                responseData = {}
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "n/a")
            except Exception as e:
                print(e)
                print("TRACE Before FAILED")
                responseData = {}
                cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "n/a")

            return
      Runtime: python3.13

Outputs:
  ControlNodeId:
    Value: !Ref KubernetesControlNode
  WorkerNodeId:
    Value: !Ref KubernetesWorkerNode


